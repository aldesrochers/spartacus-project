// ============================================================================
// Copyright (C) 2021-
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// Alexis L. Desrochers (alexisdesrochers@gmail.com)
//
// ============================================================================


#ifndef __MeshRep_Cell_hxx__
#define __MeshRep_Cell_hxx__

// Spartacus
#include <MeshRep_Representation.hxx>
#include <mp_LinearHexahedron8N.hxx>
#include <mp_LinearLine2N.hxx>
#include <mp_LinearPentahedron6N.hxx>
#include <mp_LinearPyramid5N.hxx>
#include <mp_LinearQuadrangle4N.hxx>
#include <mp_LinearTetrahedron4N.hxx>
#include <mp_LinearTriangle3N.hxx>
#include <mp_QuadraticHexahedron20N.hxx>
#include <mp_QuadraticHexahedron27N.hxx>
#include <mp_QuadraticLine3N.hxx>
#include <mp_QuadraticPentahedron15N.hxx>
#include <mp_QuadraticPentahedron18N.hxx>
#include <mp_QuadraticPyramid13N.hxx>
#include <mp_QuadraticPyramid14N.hxx>
#include <mp_QuadraticQuadrangle8N.hxx>
#include <mp_QuadraticQuadrangle9N.hxx>
#include <mp_QuadraticTetrahedron10N.hxx>
#include <mp_QuadraticTriangle6N.hxx>
#include <mp_QuadraticTriangle7N.hxx>

// Forward declarations
class MeshRep_Cell;

// Handles
DEFINE_STANDARD_HANDLE(MeshRep_Cell, MeshRep_Representation);


// ============================================================================
/*!
 *  \brief MeshRep_Cell
*/
// ============================================================================
class MeshRep_Cell : public MeshRep_Representation
{

public:
    // constructors
    Standard_EXPORT MeshRep_Cell();
    // destructors
    Standard_EXPORT ~MeshRep_Cell();

public:

    Standard_EXPORT virtual Standard_Boolean    IsLinearHexahedron8N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearLine2N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearPentahedron6N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearPyramid5N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearQuadrangle4N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearTetrahedron3N() const;
    Standard_EXPORT virtual Standard_Boolean    IsLinearTriangle3N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticHexahedron20N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticHexahedron27N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticLine3N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticPentahedron15N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticPentahedron18N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticPyramid13N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticPyramid14N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticQuadrangle8N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticQuadrangle9N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticTetrahedron10N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticTriangle6N() const;
    Standard_EXPORT virtual Standard_Boolean    IsQuadraticTriangle7N() const;

    Standard_EXPORT virtual const mp_LinearHexahedron8N&        LinearHexahedron8N() const;
    Standard_EXPORT virtual const mp_LinearLine2N&              LinearLine2N() const;
    Standard_EXPORT virtual const mp_LinearPentahedron6N&       LinearPentahedron6N() const;
    Standard_EXPORT virtual const mp_LinearPyramid5N&           LinearPyramid5N() const;
    Standard_EXPORT virtual const mp_LinearQuadrangle4N&        LinearQuadrangle4N() const;
    Standard_EXPORT virtual const mp_LinearTetrahedron4N&       LinearTetrahedron4N() const;
    Standard_EXPORT virtual const mp_LinearTriangle3N&          LinearTriangle3N() const;
    Standard_EXPORT virtual const mp_QuadraticHexahedron20N&    QuadraticHexahedron20N() const;
    Standard_EXPORT virtual const mp_QuadraticHexahedron27N&    QuadraticHexahedron27N() const;
    Standard_EXPORT virtual const mp_QuadraticLine3N&           QuadraticLine3N() const;
    Standard_EXPORT virtual const mp_QuadraticPentahedron15N&   QuadraticPentahedron15N() const;
    Standard_EXPORT virtual const mp_QuadraticPentahedron18N&   QuadraticPentahedron18N() const;
    Standard_EXPORT virtual const mp_QuadraticPyramid13N&       QuadraticPyramid13N() const;
    Standard_EXPORT virtual const mp_QuadraticPyramid14N&       QuadraticPyramid14N() const;
    Standard_EXPORT virtual const mp_QuadraticQuadrangle8N&     QuadraticQuadrangle8N() const;
    Standard_EXPORT virtual const mp_QuadraticQuadrangle9N&     QuadraticQuadrangle9N() const;
    Standard_EXPORT virtual const mp_QuadraticTetrahedron10N&   QuadraticTetrahedron10N() const;
    Standard_EXPORT virtual const mp_QuadraticTriangle6N&       QuadraticTriangle6N() const;
    Standard_EXPORT virtual const mp_QuadraticTriangle7N&       QuadraticTriangle7N() const;

public:

    DEFINE_STANDARD_RTTIEXT(MeshRep_Cell, MeshRep_Representation);

};


#endif // __MeshRep_Cell_hxx__
